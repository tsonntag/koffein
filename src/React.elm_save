module React exposing (..)

import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Random
import Process
import Task
import Time exposing (..)
import Point exposing (..)
import Round exposing (..)
import Debug exposing (log)
import Utils exposing (boolToString)


main =
  Browser.element
    { init = init , update = update , subscriptions = subscriptions , view = view}


type alias Model = { maxRounds: Int
                   , rounds:    List Round
                   , current:   Round
                   , avg:       Maybe Int
                   }

initialModel : Model
initialModel =
    { maxRounds = 0
    , rounds    = []
    , current   = Round.initialRound
    , avg       = Nothing
    }

drawInt : Maybe Int -> String
drawInt int = int |> Maybe.map String.fromInt |> Maybe.withDefault ""


type Msg
  = SetMaxRounds  String
  | Start
  | RoundMsg      Round.Msg


init : () -> (Model, Cmd Msg)
init _ = ( initialModel, Cmd.none )


update: Msg -> Model -> (Model, Cmd Msg)
update msg model =
  case msg of
    Start ->
        ( initialModel
        , Cmd.map RoundMsg Round.startCmd )

    SetMaxRounds ns ->
        ({ model | maxRounds = ns |> String.toInt |> Maybe.withDefault 0 }
        , Cmd.none )

    RoundMsg roundMsg ->
        let
            ( round, roundCmd ) = Round.update roundMsg model.current
        in
            ( { model | current = round }
            , Cmd.map RoundMsg roundCmd )



subscriptions : Model -> Sub Msg
subscriptions model = Sub.none


view : Model -> Html Msg
view model =
  div []
      [
        input  [ type_ "number", value "0", onInput SetMaxRounds] []
      , button [ onClick Start ]        [ text "Start" ]
      , Html.map RoundMsg (drawRound model.current)
      ]
